{"name":"Manylinux-wheel-builder","tagline":"This action builds manylinux wheels for several recent versions of Python (3.6 - 3.9) and publishes to pypi. It uses docker image provided by pypa's manylinux project. We are using manylinux2010_x86_64 docker image which requires pip >= 19.0 on the client installing the built wheel.","body":"# Manylinux-wheel-builder\r\nWe all love python because there is a library in [PyPI](https://pypi.org/) for almost every problem out there but distributing built [wheel](https://pythonwheels.com/) distribution for this libraries haven't been an easy task especially for the Linux. There are many distro built on the GNU/Linux code base and each distro's community makes its own choices about which library versions to include and how long to support them. This is a challenge for someone who just wants to distribute a Python library that contains native code. It would be a lot of work to build separate binaries for Red Hat, SUSE, Ubuntu, and Debianâ€”and even more work building separate binaries for each supported version!\r\n\r\nFortunately, pypa's [manylinux](https://github.com/pypa/manylinux) project has come up with a solution that can make a built wheel compatible with most (though not all) Linux distros. They have been releasing docker images that can build this platform independent wheel. I have created this action based on this docker image to make deployment process easy for the developer of a python library.\r\n\r\n## Basic Usage\r\nIf only want to build and publish wheels for Linux platform then below CD action will be enough. It will only build and publish package if pushed commit contains a version tag because this seems the most appropriate in this case but you can change it if you want.\r\n```yml\r\nname: pypi manylinux wheel deployer\r\non:\r\n  push:\r\n    tags:\r\n      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10\r\njobs:\r\n  Linux-build:\r\n    runs-on: ubuntu-latest\r\n    env:\r\n      TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}\r\n      TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n      - name: build and upload manylinux wheels\r\n        uses:  Niraj-Kamdar/manylinux-wheel-builder@master\r\n        # default will be all latest python versions from 3.6+\r\n        # You can specify comma separated string of different python version\r\n        # for which you want to build wheels Ex: \"3.6, 3.7, 3.8\" (excludes 3.9)\r\n        with:\r\n          python-versions: \"3.*\"\r\n```\r\nThe secret used in `${{ secrets.TWINE_USERNAME }}` and `${{ secrets.TWINE_PASSWORD }}` needs to be created on the settings page of your project on GitHub. See [Creating & using secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets).\r\n>Pro tip: instead of using branch pointers, like master, pin versions of Actions that you use to tagged versions or sha1 commit identifiers. This will make your workflows more secure and better reproducible, saving you from sudden and unpleasant surprises.\r\n\r\n## Advanced Usage\r\nIf you also want to build and publish wheels for windows and macos in adition to linux, you can append above action with following yaml snippet. This relies on [setup-python](https://github.com/actions/setup-python) action.\r\n```yml\r\nMatrix-build:\r\n    runs-on: ${{ matrix.os }}\r\n    env:\r\n      TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}\r\n      TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}\r\n    strategy:\r\n      matrix:\r\n        os: [macos-latest, windows-latest]\r\n        python-version: [3.6, 3.7, 3.8]\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n      - name: Set up Python\r\n        uses: actions/setup-python@v2\r\n        with:\r\n          python-version: ${{ matrix.python-version }}\r\n      - name: build wheel\r\n        run: |\r\n          pip install wheel\r\n          python setup.py bdist_wheel\r\n      - name: upload wheel\r\n        run: |\r\n          pip install twine\r\n          twine upload dist/*\r\n        continue-on-error: true\r\n```\r\nCheckout example CD actions from [/examples](https://github.com/Niraj-Kamdar/manylinux-wheel-builder/tree/master/examples).\r\n## FAQs\r\n**1. Why don't I build wheel on ubuntu-latest and publish it directly to the PyPI?**\r\n\r\nBuilding manylinux-compatible wheels is not trivial; as a general rule, binaries built on one Linux distro will only work on other Linux distros that are the same age or newer. Therefore, if we want to make binaries that run on most Linux distros, we have to use manylinux docker images. This is the reason why twine won't upload distro specific built wheel.\r\n\r\n**2. Why did I choose manylinux2010?**\r\n\r\nPypa's manylinux has mentioned that - \"The manylinux2010 tags allow projects to distribute wheels that are automatically installed (and work!) on the vast majority of desktop and server Linux distributions.\"\r\n\r\n## Contributions\r\nIf you find any bugs or have any idea to improve this action please file an issue. You are also welcome to improve project documentation.\r\n\r\n## License\r\nThe Dockerfile and associated scripts and documentation in this project are released under the [MIT License](https://github.com/Niraj-Kamdar/manylinux-wheel-builder/blob/master/LICENSE)\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}